#include "Ast.h"
#include "SymbolTable.h"
#include "Unit.h"
#include "Instruction.h"
#include "IRBuilder.h"
#include <string>
#include "Type.h"
#include <assert.h>
extern FILE *yyout;
int Node::counter = 0;
IRBuilder *Node::builder = nullptr;
int genBr = 0; // 优化用，生成跳转指令
bool funcReturned = false;
Type* returnType = nullptr;
Node::Node()
{
    seq = counter++;
}

void Node::backPatch(std::vector<Instruction *> &list, BasicBlock *bb)
{
    for (auto &inst : list)
    {
        if (inst->isCond())
            dynamic_cast<CondBrInstruction *>(inst)->setTrueBranch(bb);
        else if (inst->isUncond())
        {
            dynamic_cast<UncondBrInstruction *>(inst)->setBranch(bb);
        }
    }
}

std::vector<Instruction *> Node::merge(std::vector<Instruction *> &list1, std::vector<Instruction *> &list2)
{
    std::vector<Instruction *> res(list1);
    res.insert(res.end(), list2.begin(), list2.end());
    return res;
}

void Ast::genCode(Unit *unit)
{
    IRBuilder *builder = new IRBuilder(unit);
    Node::setIRBuilder(builder);
    root->genCode();
}

void BinaryExpr::genCode()
{
    std::cout << "Entering BinaryExpr::genCode" << std::endl;
    BasicBlock *bb = builder->getInsertBB();
    Function *func = bb->getParent();

    if (op == AND)
    {
        BasicBlock *trueBB = new BasicBlock(func); // if the result of lhs is true, jump to the trueBB.
        genBr = 1;
        expr1->genCode();
        backPatch(expr1->trueList(), trueBB);
        builder->setInsertBB(trueBB); // set the insert point to the trueBB so that intructions generated by expr2 will be inserted into it.
        expr2->genCode();
        true_list = expr2->trueList();
        false_list = merge(expr1->falseList(), expr2->falseList());
    }
    else if (op == OR)
    {
        // TODO: 实现 OR 操作符的逻辑
        BasicBlock *falseBB = new BasicBlock(func); // if the result of lhs is false, jump to the falseBB.
        genBr = 1;
        expr1->genCode();
        backPatch(expr1->falseList(), falseBB);
        builder->setInsertBB(falseBB); // set the insert point to the falseBB so that instructions generated by expr2 will be inserted into it.
        expr2->genCode();
        true_list = merge(expr1->trueList(), expr2->trueList());
        false_list = expr2->falseList();
    }
    else if (op >= LESS && op <= NEQ)
    {
        // TODO: 实现关系操作符 (LESS, GREATER, LEQ, GEQ, EQ, NEQ) 的逻辑
        genBr--;
        expr1->genCode();
        expr2->genCode();
        genBr++;

        int opcode = -1;
        switch (op)
        {
        case LESS:
            opcode = CmpInstruction::L;
            break;
        case LEQ:
            opcode = CmpInstruction::LE;
            break;
        case GREATER:
            opcode = CmpInstruction::G;
            break;
        case GEQ:
            opcode = CmpInstruction::GE;
            break;
        case EQ:
            opcode = CmpInstruction::E;
            break;
        case NEQ:
            opcode = CmpInstruction::NE;
            break;
        }
        new CmpInstruction(opcode, dst, expr1->getOperand(), expr2->getOperand(), bb);

        if (genBr > 0)
        {
            // 跳转目标block
            BasicBlock *trueBlock, *falseBlock, *mergeBlock;
            trueBlock = new BasicBlock(func);
            falseBlock = new BasicBlock(func);
            mergeBlock = new BasicBlock(func);
            true_list.push_back(new CondBrInstruction(trueBlock, falseBlock, dst, bb));
            false_list.push_back(new UncondBrInstruction(mergeBlock, falseBlock));
        }
    }
    else if (op >= ADD && op <= MOD)
    {
        expr1->genCode();
        expr2->genCode();
        Operand *src1 = expr1->getOperand();
        Operand *src2 = expr2->getOperand();
        int opcode;
        switch (op)
        {
        case ADD:
            opcode = BinaryInstruction::ADD;
            break;
        case SUB:
            opcode = BinaryInstruction::SUB;
            break;
        case MUL:
            opcode = BinaryInstruction::MUL;
            break;
        case DIV:
            opcode = BinaryInstruction::DIV;
            break;
        case MOD:
            opcode = BinaryInstruction::MOD;
            break;
        default:
            opcode = -1;
            break;
        }
        new BinaryInstruction(opcode, dst, src1, src2, bb);
    }
}

void Constant::genCode()
{
    // we don't need to generate code.
}

void Id::genCode()
{
    // std::cout << "Entering genCode::genCode" << std::endl;

    BasicBlock *bb = builder->getInsertBB();
    Operand *addr = dynamic_cast<IdentifierSymbolEntry *>(symbolEntry)->getAddr();
    new LoadInstruction(dst, addr, bb);
}

void IfStmt::genCode()
{
    std::cout << "Entering IfStmt::genCode" << std::endl;
    Function *func;
    BasicBlock *then_bb, *end_bb;

    func = builder->getInsertBB()->getParent();
    then_bb = new BasicBlock(func);
    end_bb = new BasicBlock(func);

    genBr = 1;
    cond->genCode();
    backPatch(cond->trueList(), then_bb);
    backPatch(cond->falseList(), end_bb);

    builder->setInsertBB(then_bb);
    thenStmt->genCode();
    then_bb = builder->getInsertBB();
    new UncondBrInstruction(end_bb, then_bb);

    builder->setInsertBB(end_bb);
}

void IfElseStmt::genCode()
{
    // TODO: 实现 IfElse 语句的代码生成逻辑
    std::cout << "Entering IfElseStmt::genCode" << std::endl;
    Function *func;
    BasicBlock *then_bb, *else_bb, *end_bb;

    func = builder->getInsertBB()->getParent();
    then_bb = new BasicBlock(func);
    else_bb = new BasicBlock(func);
    end_bb = new BasicBlock(func);

    genBr = 1;
    cond->genCode();
    backPatch(cond->trueList(), then_bb);
    backPatch(cond->falseList(), else_bb);

    // 先处理then分支
    builder->setInsertBB(then_bb);
    thenStmt->genCode();
    then_bb = builder->getInsertBB();
    new UncondBrInstruction(end_bb, then_bb);

    // 再处理else分支
    builder->setInsertBB(else_bb);
    elseStmt->genCode();
    else_bb = builder->getInsertBB();
    new UncondBrInstruction(end_bb, else_bb);

    builder->setInsertBB(end_bb);
}

void CompoundStmt::genCode()
{
    // TODO: 实现复合语句的代码生成逻辑
    stmt->genCode();
}

void SeqNode::genCode()
{
    // TODO: 实现序列节点的代码生成逻辑
    for (auto stmt : stmtList)
    {
        stmt->genCode();
    }
}

void DeclStmt::genCode()
{
    for (auto stmt : defList)
    {
        stmt->genCode();
    }
}

void DefNode::genCode()
{

}

void AssignStmt::genCode()
{

}

void WhileStmt::genCode()
{
    whileStack.push(this);

    Function *func = builder->getInsertBB()->getParent();
    BasicBlock *bb = builder->getInsertBB();

    stmt_bb = new BasicBlock(func);
    cond_bb = new BasicBlock(func);
    end_bb = new BasicBlock(func);

    new UncondBrInstruction(cond_bb, bb);

    builder->setInsertBB(cond_bb);
    Cond->genCode();
    backPatch(Cond->trueList(), stmt_bb);
    backPatch(Cond->falseList(), end_bb);

    builder->setInsertBB(stmt_bb);
    stmt->genCode();
    bb = builder->getInsertBB();
    new UncondBrInstruction(cond_bb, bb);

    builder->setInsertBB(end_bb);

    whileStack.pop();
}

void ContinueStmt::genCode()
{
    Function *func = builder->getInsertBB()->getParent();
    BasicBlock *bb = builder->getInsertBB();

    BasicBlock* condbb = ((WhileStmt*)whileStmt)->getCondBB();

    new UncondBrInstruction(condbb, bb); // 跳转到循环条件语句块

    BasicBlock *nextBlock = new BasicBlock(func);
    builder->setInsertBB(nextBlock);
}

void BreakStmt::genCode()
{
    Function *func = builder->getInsertBB()->getParent();
    BasicBlock *bb = builder->getInsertBB();

    BasicBlock *endbb = ((WhileStmt *)whileStmt)->getEndBB();

    new UncondBrInstruction(endbb, bb); // 跳转到循环结束语句块
    BasicBlock *next_bb = new BasicBlock(func);
    builder->setInsertBB(next_bb);
}

void ReturnStmt::genCode()
{
    BasicBlock *bb = builder->getInsertBB();
    if (retValue)
    {
        retValue->genCode();
        Operand *operand = retValue->getOperand();
        new RetInstruction(operand, bb);
    }
    else
    {
        new RetInstruction(nullptr, bb);
    }
}

void ForStmt::genCode()
{
    forStack.push(this);
    Function *func = builder->getInsertBB()->getParent();
    BasicBlock *bb=builder->getInsertBB();
    
    init_bb = new BasicBlock(func);
    cond_bb = new BasicBlock(func);
    loop_bb = new BasicBlock(func);
    end_bb = new BasicBlock(func);
    stmt_bb = new BasicBlock(func);

    new UncondBrInstruction(init_bb, bb);

    builder->setInsertBB(init_bb);
    initStmt->genCode();
    new UncondBrInstruction(cond_bb, init_bb);

    builder->setInsertBB(cond_bb);
    Cond->genCode();
    backPatch(Cond->trueList(), stmt_bb);
    backPatch(Cond->falseList(), end_bb);

    builder->setInsertBB(stmt_bb);
    stmt->genCode();
    stmt_bb = builder->getInsertBB();
    new UncondBrInstruction(loop_bb, stmt_bb);

    builder->setInsertBB(loop_bb);
    loopStmt->genCode();
    new UncondBrInstruction(cond_bb, loop_bb);

    builder->setInsertBB(end_bb);

    forStack.pop();

}

void IOStmt::genCode()
{
    BasicBlock *bb = builder->getInsertBB();
    if (op == PRINT)
    {
        expr->genCode();
        Operand *src = expr->getOperand();
        new PrintInstruction(src, bb);
    }
    else if (op == SCAN)
    {
        Operand *addr = dynamic_cast<IdentifierSymbolEntry *>(expr->getSymPtr())->getAddr();
        new ScanInstruction(addr, bb);
    }
}

// main function
void FunctionDef::genCode()
{
    Unit *unit = builder->getUnit();
    Function *func = new Function(unit, se);
    BasicBlock *entry = func->getEntry();
    // set the insert point to the entry basicblock of this function.
    builder->setInsertBB(entry);

    stmt->genCode();

    /**
     * Construct control flow graph. You need do set successors and predecessors for each basic block.
     * Todo
     */
    // 遍历Function中所有的BasicBlock，在各个BasicBlock之间建立控制流关系

}

void Ast::typeCheck()
{

}

void BinaryExpr::typeCheck()
{
    // TODO: 实现二元表达式的类型检查逻辑

}

void Constant::typeCheck()
{
    // TODO: 实现常量的类型检查逻辑
}

void Id::typeCheck()
{

}

void IfStmt::typeCheck()
{
    // TODO: 实现 if 语句的类型检查逻辑

}

void IfElseStmt::typeCheck()
{
    // TODO: 实现 if-else 语句的类型检查逻辑

}

void CompoundStmt::typeCheck()
{

}

void SeqNode::typeCheck()
{

}

void DeclStmt::typeCheck()
{

}

void DefNode::typeCheck()
{

}

void ContinueStmt::typeCheck()
{
}

void BreakStmt::typeCheck()
{
}

void ReturnStmt::typeCheck()
{

}

void AssignStmt::typeCheck()
{

}

void WhileStmt::typeCheck()
{

}

void ForStmt::typeCheck()
{

}

void IOStmt::typeCheck()
{
}

void FunctionDef::typeCheck()
{


}

void BinaryExpr::output(int level)
{
    std::string op_str;
    switch (op)
    {
    case ADD:
        op_str = "add";
        break;
    case SUB:
        op_str = "sub";
        break;
    case MUL:
        op_str = "mul";
        break;
    case DIV:
        op_str = "div";
        break;
    case MOD:
        op_str = "mod";
        break;
    case AND:
        op_str = "and";
        break;
    case OR:
        op_str = "or";
        break;
    case LESS:
        op_str = "less";
        break;
    case GREATER:
        op_str = "greater";
        break;
    case EQ:
        op_str = "equ";
        break;
    case NEQ:
        op_str = "noequ";
        break;
    case GEQ:
        op_str = "larand";
        break;
    case LEQ:
        op_str = "lesand";
        break;
    case NOT:
        op_str = "not";
        break;
    }

    fprintf(yyout, "%*cBinaryExpr\top: %s\n", level, ' ', op_str.c_str());
    expr1->output(level + 4);
    if (expr2 != nullptr)
        expr2->output(level + 4);
}



void Ast::output()
{
    fprintf(yyout, "program\n");
    if (root != nullptr)
        root->output(4);
}

void Constant::output(int level)
{
    std::string type, value;
    type = symbolEntry->getType()->toStr();
    value = symbolEntry->toStr();
    fprintf(yyout, "%*cInteger\tvalue: %s\ttype: %s\n", level, ' ',
            value.c_str(), type.c_str());
}

void Id::output(int level)
{
    std::string name, type;
    int scope;
    name = symbolEntry->toStr();
    type = symbolEntry->getType()->toStr();
    scope = dynamic_cast<IdentifierSymbolEntry *>(symbolEntry)->getScope();
    fprintf(yyout, "%*cId\tname: %s\tscope: %d\ttype: %s\n", level, ' ',
            name.c_str(), scope, type.c_str());
}

void CompoundStmt::output(int level)
{
    fprintf(yyout, "%*cCompoundStmt\n", level, ' ');
    stmt->output(level + 4);
}

void SeqNode::addNext(StmtNode *next)
{
    stmtList.push_back(next);
}

void SeqNode::output(int level)
{
    fprintf(yyout, "%*cSequence\n", level, ' ');
    for (auto stmt : stmtList)
    {
        stmt->output(level + 4);
    }
}

void DeclStmt::addNext(DefNode *next)
{
    defList.push_back(next);
}

void DeclStmt::output(int level)
{
    fprintf(yyout, "%*cDeclStmt\n", level, ' ');
    for (auto def : defList)
    {
        def->output(level + 4);
    }
}

void DefNode::output(int level)
{

    fprintf(yyout, "%*cDefNoden\n", level, ' ');
    id->output(level + 4);
    if (initVal == nullptr)
    {
        fprintf(yyout, "%*cnull\n", level + 4, ' ');
    }
    else
    {
        initVal->output(level + 4);
    }
}

void IfStmt::output(int level)
{
    fprintf(yyout, "%*cIfStmt\n", level, ' ');
    cond->output(level + 4);
    thenStmt->output(level + 4);
}

void IfElseStmt::output(int level)
{
    fprintf(yyout, "%*cIfElseStmt\n", level, ' ');
    cond->output(level + 4);
    thenStmt->output(level + 4);
    elseStmt->output(level + 4);
}

void BreakStmt::output(int level)
{
    fprintf(yyout, "%*cBreakStmt\n", level, ' ');
}

void ContinueStmt::output(int level)
{
    fprintf(yyout, "%*cContinueStmt\n", level, ' ');
}

void ReturnStmt::output(int level)
{
    fprintf(yyout, "%*cReturnStmt\n", level, ' ');
    retValue->output(level + 4);
}

void AssignStmt::output(int level)
{
    fprintf(yyout, "%*cAssignStmt\n", level, ' ');
    lval->output(level + 4);
    expr->output(level + 4);
}

void WhileStmt::output(int level)
{
    fprintf(yyout, "%*cWhileStmt\n", level, ' ');
    Cond->output(level + 4);
    stmt->output(level + 4);
}

void ForStmt::output(int level)
{
    fprintf(yyout, "%*cForStmt\n", level, ' ');
    initStmt->output(level + 4);
    Cond->output(level + 4);
    loopStmt->output(level + 4);
    stmt->output(level + 4);
}

void IOStmt::output(int level)
{
    
    if (op == PRINT)
    {
        fprintf(yyout, "%*cIOStmt op: print\n", level, ' ');
    }
    else
    {
        fprintf(yyout, "%*cIOStmt op: scan\n", level, ' ');
    }
    expr->output(level + 4);
}

void FunctionDef::output(int level)
{
    std::string name, type;
    name = se->toStr();
    type = se->getType()->toStr();
    fprintf(yyout, "%*cFunctionDefine function name: %s, type: %s\n", level, ' ',
            name.c_str(), type.c_str());
    stmt->output(level + 4);

}
